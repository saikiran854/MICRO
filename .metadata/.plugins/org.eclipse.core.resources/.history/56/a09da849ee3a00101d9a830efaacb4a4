package com.project.orderservice.controller;

import java.util.concurrent.CompletableFuture;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import com.project.orderservice.dto.OrderRequest;
import com.project.orderservice.service.OrderService;

import io.github.resilience4j.circuitbreaker.annotation.CircuitBreaker;
import io.github.resilience4j.retry.annotation.Retry;
import io.github.resilience4j.timelimiter.annotation.TimeLimiter;

@RestController
@RequestMapping("/order")
public class OrderController {
	
	@Autowired
	OrderService orderService;
	
	@GetMapping("/")
	public String message() {
		return "Hello";
	}
	
	@CircuitBreaker(name = "inventory" , fallbackMethod = "placeOrderFallback")
	@TimeLimiter(name = "inventory", fallbackMethod = "fallbackMethod1")
	@Retry(name = "inventory")
	@PostMapping("/placeOrder")
	public CompletableFuture<String> placeOrder(@RequestBody OrderRequest orderRequest) {
		
		return CompletableFuture.supplyAsync(() -> orderService.placeOrder(orderRequest) ) ;
		
//		return "Order placed successfully";
	}
	
	public CompletableFuture<String> placeOrderFallback( OrderRequest orderRequest , RuntimeException ex) {
		return CompletableFuture.supplyAsync(() -> "OOps!! Please try after some time" ) ;
	}
	public CompletableFuture<String> fallbackMethod1( OrderRequest orderRequest , RuntimeException ex) {
		return CompletableFuture.supplyAsync(() -> "OOps!! Please try after some time, there is timeout!" ) ;
	}

}
